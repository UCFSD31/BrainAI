import cv2
import math
import mediapipe as mp

mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils

# Constants
ANGLE_THRESHOLD = 10  # Angle threshold to detect a significant turn

# Initialize variables
prev_angle_degrees = None

webcam = cv2.VideoCapture(0)
while webcam.isOpened():
    success, img = webcam.read()

    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = mp_pose.Pose().process(img_rgb)

    if results.pose_landmarks:
        # Extract pose landmarks
        pose_landmarks = []
        for landmark in results.pose_landmarks.landmark:
            x = int(landmark.x * img.shape[1])
            y = int(landmark.y * img.shape[0])
            pose_landmarks.append((x, y))

        # Get wrist, elbow, and hand landmarks
        wrist = pose_landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value]
        elbow = pose_landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value]
        hand = pose_landmarks[mp_pose.PoseLandmark.LEFT_PINKY.value]

        # Calculate vectors from wrist to elbow and from elbow to hand
        vec_wrist_elbow = (elbow[0] - wrist[0], elbow[1] - wrist[1])
        vec_elbow_hand = (hand[0] - elbow[0], hand[1] - elbow[1])

        # Calculate angle between vectors
        dot_product = vec_wrist_elbow[0] * vec_elbow_hand[0] + vec_wrist_elbow[1] * vec_elbow_hand[1]
        magnitude_wrist_elbow = math.sqrt(vec_wrist_elbow[0]**2 + vec_wrist_elbow[1]**2)
        magnitude_elbow_hand = math.sqrt(vec_elbow_hand[0]**2 + vec_elbow_hand[1]**2)
        if magnitude_wrist_elbow != 0 and magnitude_elbow_hand != 0:
            cosine_angle = dot_product / (magnitude_wrist_elbow * magnitude_elbow_hand)
            angle_radians = math.acos(cosine_angle)
            angle_degrees = math.degrees(angle_radians)
        else:
            angle_degrees = 0

        # Check if elbow is turning significantly
        if prev_angle_degrees is not None:
            angle_change = abs(angle_degrees - prev_angle_degrees)
            if angle_change >= ANGLE_THRESHOLD:
                print("Elbow turning detected!")

        # Update previous angle
        prev_angle_degrees = angle_degrees

        # Draw angle text on the image
        cv2.putText(img, f'Angle: {angle_degrees:.2f} degrees', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2.imshow('Arm Tracking', img)
    if cv2.waitKey(5) & 0xFF == ord('q'):
        break

webcam.release()
cv2.destroyAllWindows()
